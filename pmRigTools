import pymel.core as pm
import logging

# Create a logger
_logger = logging.getLogger(__name__)

def clusLoc():
    edges = pm.selected(flatten=1)
    #  list comprehension
    verts = list(set(sum([list(e.connectedVertices()) for e in edges], [])))

    # cluster
    clusDef, clusTfm = pm.cluster(verts)

    # locator or joints in the future
    loc = pm.spaceLocator()

    # point Constraint
    pm.delete(pm.pointConstraint(clusTfm, loc, mo=False))
    pm.delete(clusTfm)

"""
usage

import pmRigTools as pmrt
reload(pmrt)
pmrt.clusLoc()

"""
"""
Case 

# A jointmode
jnt =pm.PyNode("L_toe_JNT")

# A mult Divide bnode
multDiv = pm.createNode("multiplyDivide")

# there are 3 types
# Typing Checking a  node for Comparison
jnt.type() #Not used anymore - collided with some other type method

# please NOW USED nodeType
jnt.nodeType() # USE nodeType FOR COMPARISON
# same as
jnt.__class__.__name__
# same as
jnt.nodeType() == "joint"
multDiv.nodeType() == "multiplyDivide"

# type() Returns the Class
type(jnt) # same as jnt.__class_
type(multDiv)

#you can use type() to returen a class for help
help(type(jnt))
help(jnt)

"""

import pymel.core as pm


def clusLoc2():
    """ if a transform is already selected, dont create ad locator move transform to the requested location """
    sel = pm.selected(flatten=True)

    # holders
    verts = []
    edges = []
    tfms = []

    # sort
    for s in sel:
        sortMe = s.__class__.__name__

        if sortMe == "Joint" or sortMe == "Transform":
            tfms.append(s)

        if sortMe == "MeshVertex":
            verts.append(s)

        if sortMe == "MeshEdge":
            edges.append(s)

    if edges:
        edgeVerts = list(set(sum([list(e.connectedVertices()) for e in edges], [])))
        verts = verts + edgeVerts

    _logger.debug('verts = %s' % verts)
    _logger.debug('tfms = %s' % tfms)

    # Cluster
    clusDef, clusTfm = pm.cluster(verts)

    if not tfms:
        loc = pm.spaceLocator()
        tfms.append(loc)

    # loop Though tfms
    for tfm in tfms:
        parent = tfm.getParent()
        children = tfm.getChildren()

        # hierarchy Issues Perpped
        parent = tfm.getParent()
        children = tfm.getChildren(type = 'transform')

        if parent:
            tfm.setParent(world=True)

        _logger.debug( "children = %s" children )
        for child in children:
            child.setParent(world = True)

        # point Constraint
        pm.delete( pm.pointConstraint(clusTfm, tfm, mo = False))

        for child in children:
            child.setParent(tfm)

        if parent:
            tfm.setParent(parent)

    # cleare the cluster
    pm.delete(clusTfm)

    _logger.debug("DONE")

"""
usage

import pmRigTools as pmrt
reload(pmrt)
pmrt.clusLoc()

"""
